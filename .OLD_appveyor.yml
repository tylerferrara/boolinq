version: '3.0.{build}'

branches:
  only:
    - master

# Maximum number of concurrent jobs for the project
max_jobs: 1

cache:
  - /tmp/tools

#---------------------------------#
#    environment configuration    #
#---------------------------------#

image:
  # - macos
  - Visual Studio 2022
  - Ubuntu

environment:
  CMAKE_VERSION_PREFIX: 3.22
  CMAKE_VERSION_FULL: 3.22.1

matrix:
  # fail immediately once one of the job fails
  fast_finish: true

# scripts that run after cloning repository
install:
  - cmd: export PATH="$HOME/bin:$PATH"
  - cmd: sudo apt-get update -y
  - cmd: sudo apt-get upgrade -y
  - cmd: pipx install cpp-coveralls
  - cmd: mkdir -p /tmp/tools
  - cmd: pushd /tmp/tools
  - cmd: if [[ ! -f "cmake-$CMAKE_VERSION_FULL-linux-x86_64.sh" ]]; then curl -SOL "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION_FULL/cmake-$CMAKE_VERSION_FULL-linux-x86_64.sh"; chmod +x "cmake-$CMAKE_VERSION_FULL-linux-x86_64.sh"'; fi
  - cmd: ./"cmake-$CMAKE_VERSION_FULL-linux-x86_64.sh" --prefix="$HOME" --exclude-subdir --skip-license
  - cmd: popd

#---------------------------------#
#       build configuration       #
#---------------------------------#

platform:
  # - ARM
  - x64
  # - x86

configuration:
  - GCC_5
  # - GCC_6

build_script:
  - cmd: mkdir build
  - cmd: cd build
  - cmd: cmake .. && make

test_script:
  - cmd: source ./test/boolinq-test
  - cmd: source ./test/boolinq-test14
  - cmd: source ./bench/boolinq-bench

on_success:
  - cmd: case "$CC" in clang-*) echo "Processing llvm coverage with llvm-cov, bypass gcov in cpp-coveralls and submitting"; find test/CMakeFiles/boolinq-test.dir/ -name '*.cpp.o' | xargs llvm-cov gcov -lp ; coveralls --root .. --include include --no-gcov --verbose ;; *) echo "Processing with gcov in cpp-coveralls and submitting"; coveralls --root .. --include include --gcov-options '\-lp' --gcov $GCOV --verbose ;; esac

for:
  -
    matrix:
      only:
        - image: Visual Studio 2022
    install:
      - cd %APPVEYOR_BUILD_FOLDER%
      - git submodule update --init --recursive
      - python -m pip install cpp-coveralls
      - mkdir -p \tmp\tools
      - cd C:\Tools\vcpkg
      - git pull
      - .\bootstrap-vcpkg.bat
      - vcpkg integrate install
      - cd %APPVEYOR_BUILD_FOLDER%
    build_script:
      - cmake -B build -S .
      - ls .
      - cmake --build build
      - ls .\build\test
    test_script:
      - cd build && ctest
    on_success:
  -
    matrix:
      only:
        - configuration: GCC_5
    environment:
      CXX: g++-5
      CC: gcc-5
      GCOV: gcov-5
    before_build:
      - cmd: sudo apt-get install g++5 gcc-5 gcov-5 -y
  # -
  #   matrix:
  #     only:
  #       - configuration: GCC_6
  #   environment:
  #     CXX: g++-6
  #     CC: gcc-6
  #     GCOV: gcov-6
  #   before_build:
  #     - cmd: sudo apt-get install g++6 gcc-6 gcov-6 -y

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
# deploy:
#     # Deploy to GitHub Releases
#   - provider: GitHub
#     artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#     draft: false
#     prerelease: false
#     on:
#       branch: master                # release from master branch only
#       APPVEYOR_REPO_TAG: true       # deploy on tag push only

# # scripts to run before deployment
# before_deploy:

# # scripts to run after deployment
# after_deploy:

# # to run your custom scripts instead of provider deployments
# deploy_script:

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
# on_success:
#   - case "$CC" in
#         clang-*)
#           echo "Processing llvm coverage with llvm-cov, bypass gcov in cpp-coveralls and submitting";
#           find test/CMakeFiles/boolinq-test.dir/ -name '*.cpp.o' | xargs llvm-cov gcov -lp ;
#           coveralls --root .. --include include --no-gcov --verbose
#           ;;
#         *)
#           echo "Processing with gcov in cpp-coveralls and submitting";
#           coveralls --root .. --include include --gcov-options '\-lp' --gcov $GCOV --verbose
#           ;;
#     esac
#   - do something

# # on build failure
# on_failure:
#   - do something

# # after build failure or success
# on_finish:
#   - do something

#---------------------------------#
#         notifications           #
#---------------------------------#

# notifications:

#   # Email
#   - provider: Email
#     to:
#       - user1@email.com
#       - user2@email.com
#     subject: 'Build {{status}}'                  # optional
#     message: "{{message}}, {{commitId}}, ..."    # optional
#     on_build_status_changed: true

